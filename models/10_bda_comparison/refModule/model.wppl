// Helpers
var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};

var colors = ["yellow","orange","red","pink",
	      "green","blue","brown","black"];

// TODO: represent context items as
// {color: ..., type: ...} instead of arrays
var getUtterancesOneFeature = function(context) {
  return _.unique(_.flatten(map(function(itemArr) {
    return [itemArr[0], itemArr[1], itemArr.join('_')];
  },context)));
};

var OverinformativeModel = function(params, context, typicalities) {

  // Cost of full utterances is sum of individual word costs,
  // unless you just use a color, in which case you incur
  // an additional costx
  var getUtteranceCost = function(utt) {
    var splited = utt.split("_");
    if (splited.length == 2) {
      return params.cost_color + params.cost_type;
    } else {
      return (_.contains(colors, splited[0]) ?
	      params.cost_color + params.color_only_cost :
	      params.cost_type);
    }
  };

  // Looks up typicality of object for each word in utt,
  // centers them using theta, and adds them up
  var getTypicality = function(utt, object) {
    var objStr = object.join("_");
    return reduce(function(word, memo) {
      var origTyp = typicalities[word][objStr];
      var centeredTyp = origTyp - params.theta;
      return memo + centeredTyp;
    }, 0, utt.split('_'));
  };
  
  var uttFitness = function(utt, object) {
    return getTypicality(utt, object); 
  };

  var literalListener = cache(function(utt){
    return Infer({method:'enumerate'},function(){
      var object = uniformDraw(context);
      factor(uttFitness(utt,object)); 
      return object;
    });
  });

  // what does cache do?
  var speaker = cache(function(target) {
    // list all possible utterances in context
    var possibleutts = getUtterancesOneFeature(context);
    return Infer({method:'enumerate'},function(){
      var utt = uniformDraw(possibleutts);
      var literalListenerERP = literalListener(utt);
      var uttCost = getUtteranceCost(utt);
      var score = params.alpha * literalListenerERP.score(target) - params.lengthWeight * uttCost;
      factor(score); 
      return utt;
    });
  });

  var runModel = function(speakerModel, target) { 
    var speakerERP = speakerModel(target);
    return Infer({method:'enumerate'},function(){
      var utt = sample(speakerERP);
      return utt;
    });
  };

  var runListener = function(listenerModel, utterance) { 
    var listenerERP = listenerModel(utterance);
    return Infer({method:'enumerate'},function(){
      var obj = sample(listenerERP);
      return obj;
    });
  };    

  return {
    runModel : runModel,
    speaker : speaker,
    listener: literalListener,
    runListener : runListener
  };
};
