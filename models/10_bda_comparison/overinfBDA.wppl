// run using:
// webppl overinfBDA.wppl --require ./refModule/

// util.seedRNG(2);
// util.seedRNG(10);
util.seedRNG(8);


var data = refModule.readCSV("./bdaInput/bda_data.csv");
//console.log("Loading data complete...",+data.length+" data points");

var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log(conditions);
// console.log("Loading unique conditions complete..."+conditions.length+" conditions");

var modelAnalysis = function() {
  var params = {
    alpha : uniformDrift({a:0,b:40,width:40/20}),
    lengthWeight : uniformDrift({a:0,b:10,width:10/20}),
    cost_color : uniformDrift({a:0,b:3,width:3/20}),
    cost_type : uniformDrift({a:0,b:3,width:3/20}),
    color_only_cost : uniformDrift({a:0,b:3,width:3/20}),
    theta : uniformDrift({a:0,b:1,width:1/20})
  };  
  

  // Run model and condition on data
  var score = sum(map(function(condition) {
    var context = {condition: condition[0], 
                   context:[[condition[1],condition[2]],[condition[3],condition[4]],[condition[5],condition[6]]]};
    var target = context.context[0];
    var model = OverinformativeModel(params,context.context);//domainInfo, params);
    var runModel = model.runModel;
    var speaker = model.speaker;
    var modelOutput = runModel(speaker, target);

    // condition on data
    var itemData = refModule.getSubset(data, {
      condition:condition[0],
      t_color:condition[1],
      t_type:condition[2],
      d1_color:condition[3],
      d1_type:condition[4],
      d2_color:condition[5],
      d2_type:condition[6]
    });
    var score = sum(map(function(dataRow) {
      var utterance = dataRow[7];
      return modelOutput.score(utterance);
    }, itemData));

    // Store predictions
    foreach(modelOutput.support([]), function(s){
      query.add([condition[0], condition[1], condition[2], condition[3], condition[4], condition[5], condition[6], s], Math.exp(modelOutput.score(s)));
    });
    
    return score;
  }, conditions));

  console.log(params);
  console.log(score);

  factor(score)
  return {predictive: query.table, params : params};
};

// var outputERP = Infer({method:'MCMC', samples: 1000, lag: 10, verbose: true}, modelAnalysis);

// console.log('inference complete... printing');

// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed8-theta");
