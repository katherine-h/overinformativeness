// run using:
// webppl overinfBDA.wppl --require ./refModule/

var data = refModule.readCSV("./bdaInput/bda_data.csv");
console.log("Loading data complete...",+data.length+" data points");

var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading unique conditions complete..."+conditions.length+" conditions");

globalStore.bigLoop = 0;

var modelAnalysis = function() {
  
  var bdaParams = {
    lexicon: uniformDraw(['realValued', 'truthConditional']),
    noiseType: uniformDraw(['none', 'addition', 'replacement']),
    noiseRate: uniformDraw([.01, .1, .5]), // uniformDrift({a: 0, b: 1, width: 1/20}),
    alpha : uniformDraw([0,1,5,10]), // uniformDrift({a:0,b:40,width:40/20}),
    cost_color : uniformDraw([0.5,1,2]), // uniformDrift({a:0,b:3,width:3/20}),
    cost_type : uniformDraw([0.5,1,2])//uniformDrift({a:0,b:3,width:3/20}),
//    color_only_cost : uniformDrift({a:0,b:3,width:3/20})
  };  

  // Substitute in the right lexicon data structure for model
  var modelParams = extend(bdaParams, {
    'lexicon': refModule.getLexicon(bdaParams.lexicon)
  });

  var speakerModel = initializeModel(modelParams);
  
  var score = reduce(function(conditionObj, memo) {
    var timing = timeit(function() {
    
    // Extract condition information
    var conditionName = conditionObj.conditionName;
    var context = [[conditionObj.t_color, conditionObj.t_type],
		   [conditionObj.d1_color, conditionObj.d1_type],
		   [conditionObj.d2_color, conditionObj.d2_type]];
    var target = context[0];

    // Run model
    var timing = timeit(function() {
      speakerModel(target, context);
    });
    var modelOutput = timing.value;

    // Store predictions
    // foreach(modelOutput.support(), function(s){
    //   var key = _.values(conditionObj).concat(s);
    //   var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
    //   globalStore.predictives = extend(globalStore.predictives, newPair);
    // });
    
    // condition on data
    var itemData = refModule.getSubset(data, conditionObj);
    return memo + reduce(function(datum, memo) {
      return modelOutput.score(datum.utterance) + memo;
    }, 0, itemData);
    });
    globalStore.bigLoop += timing.runtimeInMilliseconds;
//    console.log('big loop: ' + timing.runtimeInMilliseconds);
    return timing.value;
  }, 0, conditions);
  console.log(globalStore.bigLoop);
  console.log(bdaParams);
  console.log(score);

  factor(score);
  return {predictive: {}, params : bdaParams};
};

var outputERP = Infer({method:'enumerate'}, modelAnalysis);
//console.log(outputERP);
// console.log('inference complete... printing');

refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda");
