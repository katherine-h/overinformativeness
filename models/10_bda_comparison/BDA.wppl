// run using:
// webppl overinfBDA.wppl --require ./refModule/

// util.seedRNG(2);
// util.seedRNG(10);
util.seedRNG(8);


var data = refModule.readCSV("./bdaInput/bda_data.csv");
//console.log("Loading data complete...",+data.length+" data points");

var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
// console.log("Loading unique conditions complete..."+conditions.length+" conditions");

var modelAnalysis = function() {
  var bdaParams = {
    lexicon: uniformDraw(['realValued', 'truthConditional']),
    perceptualNoise: uniformDraw(['none', 'random', 'similarityBased']),
    noiseRate: uniformDrift({a: 0, b: 1, width: 1/20}),
    alpha : uniformDrift({a:0,b:40,width:40/20}),
    cost_color : uniformDrift({a:0,b:3,width:3/20}),
    cost_type : uniformDrift({a:0,b:3,width:3/20}),
    color_only_cost : uniformDrift({a:0,b:3,width:3/20})
  };  

  // Substitute in the right lexicon data structure for model
  var modelParams = _.extend(bdaParams, {
    'lexicon': refModule.getLexicon(bdaParams.lexicon)
  });

  var score = reduce(function(conditionObj, memo) {
    // Extract condition information
    var conditionName = conditionObj.conditionName;
    var context = [[conditionObj.t_color, conditionObj.t_type],
		   [conditionObj.d1_color, conditionObj.d1_type],
		   [conditionObj.d2_color, conditionObj.d2_type]];
    var target = context[0];

    // Run model
    var speakerModel = initializeModel(modelParams);
    var modelOutput = speakerModel(target, context);

    // Store predictions
    foreach(modelOutput.support(), function(s){
      query.add(_.values(conditionObj).concat(s), Math.exp(modelOutput.score(s)));
    });
    
    // condition on data
    var itemData = refModule.getSubset(data, conditionObj);
    return memo + reduce(function(datum, memo) {
      return modelOutput.score(datum.utterance) + memo;
    }, 0, itemData);
  }, 0, conditions);
  
  console.log(bdaParams);
  console.log(score);

  factor(score);
  return {predictive: query.table, params : bdaParams};
};

var outputERP = Infer({method:'MCMC', samples: 10, verbose: true},
		      modelAnalysis);
console.log(outputERP);
// console.log('inference complete... printing');

// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed8-theta");
