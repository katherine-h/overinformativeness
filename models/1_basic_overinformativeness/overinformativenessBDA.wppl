// run using:
// webppl basicLevelBDA.wppl --require ./refModule/

// var data = refModule.readCSV("./bdaInput/data_bda_modifiers.csv");
var data = refModule.readCSV("./bdaInput/data_bda_modifiers_reduced.csv");
console.log("Loading data complete...")
// var conditions = refModule.readCSV("./bdaInput/unique_conditions_modifiers.csv");
var conditions = refModule.readCSV("./bdaInput/unique_conditions_modifiers_reduced.csv");
console.log("Loading unique conditions complete...")

var modelAnalysis = function() {
  // console.log("Running next sample...");
  // Sample params
  var params = {
    alpha : uniform(0,10),
    lengthWeight : uniform(0,5),
    typWeight : .5, //THIS DOES NOT GET USED
    typicality_color : uniform(0,1),
    typicality_size : uniform(0,1)
  };
  
  var constructContext = function(condition,size,color) {
    var context = [];
    var sufficientdimension = condition.substring(0,condition.length-2);
    var numDistractors = condition.substring(condition.length-2,condition.length-1);
    var numShared = condition.substring(condition.length-1,condition.length);
    var numDiff = numDistractors - numShared;
    // var othersize = size === "big" ? "small" : "big";
    var othersize = "othersize";
    var othercolor = "othercolor";    
    context.push([size,color]); //add the target to the context

    // console.log(sufficientdimension);
    // console.log(numDistractors);
    // console.log(numShared);
    // console.log(numDiff);

    var buildUp = function(n,s,c) {      
      // console.log(context);
      // console.log(n);
      // console.log(s);
      // console.log(c);
      if (n == 1) {
        context.push([s,c]);
      } else {
        context.push([s,c]);
        buildUp(n-1,s,c);
      }
    };    

    if (sufficientdimension == "size") {
      // console.log("at least getting in the right place");
      buildUp(numShared,othersize,color);
      // console.log("added shared features");
      if (numDiff > 0) { buildUp(numDiff,othersize,othercolor); }
    } else {
      buildUp(numShared,size,othercolor);
      if (numDiff > 0) { buildUp(numDiff,othersize,othercolor); }
    }
    return context;
  };

  // Run model and condition on data
  var score = sum(map(function(condition) {
    // console.log("Creating next context...");
    // console.log(condition[2]);
    // console.log(condition[1]);
    // console.log(condition[0]);
    var context = constructContext(condition[2],condition[1],condition[0]);
    // console.log("condition... " +condition);
    // console.log("Context construction complete... "+context);
    var target = context[0];
    // console.log("Generating model...");
    var model = OverinformativeModel(params,context);//domainInfo, params);
    var runModel = model.runModel;
    var speaker = model.speaker;
    // return sum(map(function(condition) {
    //   return sum(map(function(item) {
	    // Get model predictions
    // console.log("Running model...");
    var modelOutput = runModel(speaker, target);//, domainInfo);

    // console.log("Conditioning on data...");
	    // condition on data
    var itemData = refModule.getSubset(data, {condition:condition[2],
						  color:condition[0],
						  size:condition[1]});
    // console.log(itemData);
	  var score = sum(map(function(dataRow) {
     // console.log("Conditioning on data row..."+dataRow);
	   var utterance = dataRow[5];
	   return modelOutput.score([], utterance);
	  }, itemData));

	    // Store predictions
	  foreach(modelOutput.support([]), function(s){
      query.add([condition[0], condition[1], condition[2], s],
		  Math.exp(modelOutput.score([], s)));
	  });

	  return score;
    //   }, domainInfo.conditions[condition]));
    // }, _.keys(domainInfo.conditions)));
  }, conditions));

  factor(score);

  return {predictive: query.table, params : params};
};

// var outputERP = MCMC(modelAnalysis, {samples: 100, burn: 10, verbose: true});
var outputERP = MCMC(modelAnalysis, {samples: 4000, burn: 2000, verbose: true});

console.log('inference complete... printing');

refModule.bayesianErpWriter(outputERP, "./bdaOutput/bdaCombined");
