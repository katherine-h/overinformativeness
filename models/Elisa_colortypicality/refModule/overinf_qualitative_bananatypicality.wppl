var uniformDraw = function (xs) {
  return xs[randomInteger(xs.length)];
};

var mean = function(thunk){
  return expectation(Enumerate(thunk), function(v){return v;});
};

var negate = function(predicate){
  return function(x){
    return !predicate(x);
  };
};

var identity = function(x){
  return x;
};

var condition = function(x){
 factor(x ? 0 : -Infinity);
};

var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};

var getUtterancesOneFeature = function(context) {
  var utts = [];
  // map takes array context and with each element in context does what is in function
  map(function(c) {
    // utterance with adjective and noun
    utts.push(c[0]+"_"+c[1]);
    // utterance only with noun
    utts.push(c[1]);
    // utterance only with adjective
    // utts.push(c[0]);
  },context);
  // returns list of strings with all possible utterances
  return _.unique(utts);
};

var OverinformativeModel = function(params, context) {

  /*var getNoise = function(utt) {
    var splited = utt.split("_");
    if (splited.length == 2) {
      return 0.1
    } else {
      return _.contains(["color","othercolor","yellow", "blue"], splited[0]) ? 0.5 : 0;
    }
  }*/

  var getUtteranceCost = function(utt) {
    var splited = utt.split("_");
    if (splited.length == 2) {
      // conditioning cost on typicality
      // return _.contains(["blue"], splited[0]) ? params.cost_type + 0.2 : params.cost_color + params.cost_type;
      return params.cost_color + params.cost_type;
    } else {
      return _.contains(["color","othercolor","yellow", "blue"], splited[0]) ? params.cost_color /*+1*/ : params.cost_type;
    }
  };


  var getTailoredTypicalityUnlogged = function(utt, object) {
    // console.log(utt);
    // console.log(object);
    // var f = Number.NEGATIVE_INFINITY;
    var e = -1;//0.00015;
    var f = -1;//0.00015;
    var tailoredtypicalities = {
      "banana" : {
        yellow_banana : params.u_banana_o_yellow_banana,
        blue_banana : params.u_banana_o_blue_banana,
        yellow_apple : f,
        blue_apple : f,
        yellow_cup : f,
        blue_cup : f
      },
      "cup" : {
        yellow_banana : f,
        blue_banana : f,
        yellow_apple : f,
        blue_apple : f,
        yellow_cup : params.u_cup_o_yellow_cup,
        blue_cup : params.u_cup_o_blue_cup
      },
      "apple" : {
        yellow_banana : f,
        blue_banana : f,
        yellow_apple : params.u_apple_o_yellow_apple,
        blue_apple : params.u_apple_o_blue_apple,
        yellow_cup : f,
        blue_cup : f
      },
      "yellow" : {
        /*yellow_of_yellow_banana : .8,
        yellow_of_yellow_apple : .5,
        yellow_of_yellow_cup : .9,
        yellow_of_blue_banana : f,
        yellow_of_blue_apple : f,
        yellow_of_blue_cup : f*/
        // yellow_banana : .9,
        // yellow_apple : .9,
        // yellow_cup : .9,
        yellow_banana : .9,
        yellow_apple : .9,
        yellow_cup : .9,        
        blue_banana : e,
        blue_apple : e,
        blue_cup : e
      },
      "blue" : {
        /*blue_of_blue_banana : .8,
        blue_of_blue_apple : .9,
        blue_of_blue_cup : .9,
        blue_of_yellow_banana : f,
        blue_of_yellow_apple : f,
        blue_of_yellow_cup : f*/
        // blue_banana : .9,
        // blue_apple : .9,
        // blue_cup : .9,
        blue_banana : .5,
        blue_apple : .5,
        blue_cup : .5,        
        yellow_banana : e,
        yellow_apple : e,
        yellow_cup : e
      },                 
    };

    var splited = utt.split("_");
    if (splited.length === 2) {
      // console.log(tailoredtypicalities[splited[0]][object.join("_")]);
      // console.log(tailoredtypicalities[splited[1]][object.join("_")]);
      var typicality = (((tailoredtypicalities[splited[0]][object.join("_")]) + (tailoredtypicalities[splited[1]][object.join("_")])));
      // console.log(typicality);
      return typicality;
    } else {
      var typicality = tailoredtypicalities[utt][object.join("_")];
      return typicality;
    }
  };

  var uttFitness = function(utt, object) {
    var typfit = getTailoredTypicalityUnlogged(utt,object); 
    return typfit; 
  };

  var literalListener = cache(function(utt){
    return Infer({method:'enumerate'},function(){
      var object = uniformDraw(context);
      // that's awesome
      factor(uttFitness(utt,object)); 
      return object;
    });
  });

  // what does cache do?
  var speaker = cache(function(target) {
    // list all possible utterances in context
    var possibleutts = getUtterancesOneFeature(context);
    return Infer({method:'enumerate'},function(){
      var utt = uniformDraw(possibleutts);
      // what does ERP stand for?
      var literalListenerERP = literalListener(utt);
      var uttCost = getUtteranceCost(utt);
      // console.log(uttCost);
      // var noise = getNoise(utt);
      var score = params.alpha * literalListenerERP.score(target) - params.lengthWeight * (uttCost);
      // console.log("score: ");
      // console.log(score);
      factor(score); 
      return utt;
    });
  });

  var runModel = function(speakerModel, target) { 
    var speakerERP = speakerModel(target);
    return Infer({method:'enumerate'},function(){
      var utt = sample(speakerERP);
      return utt;
    });
  };

  var runListener = function(listenerModel, utterance) { 
    var listenerERP = listenerModel(utterance);
    return Infer({method:'enumerate'},function(){
      var obj = sample(listenerERP);
      return obj;
    });
  };    

  return {
    runModel : runModel,
    speaker : speaker,
    listener: literalListener,
    runListener : runListener
  };
};
