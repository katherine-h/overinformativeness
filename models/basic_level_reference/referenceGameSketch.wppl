// run using:
// webppl referenceGameSketch.wppl --require refModule/

//var tax = refModule.buildKnowledge("branching", "animals").unifTaxonomy;

var info = tableInfo;

var tax = info.tax;

var priorWeight = .05;

var condition = function(x){
 factor(x ? 0 : -Infinity);
};

var uniformDraw = function (xs) {
  return xs[randomInteger(xs.length)];
};

var labelFitness = function(label, object) {
  var consistentObjs = tax[label];
  return _.has(consistentObjs, object) ? 0 : -Infinity;
};

var meaning = function(label) {
  return function(object) {
    return labelFitness(label, object);
  };
};

var makeObjectPrior = function(item) {
  return Enumerate(function() {
    return uniformDraw(item);
  });
};

var getLabelPrior = function(object) {
  var labels = refModule.getRelevantLabels(object, tax);
  console.log(object);
  console.log(labels);
  return Enumerate(function(){
    var label = uniformDraw(labels);
    // score for word length
    var labelLength = label.length;
    var labelFreq = Math.log(refModule.getWordFrequency(label));
    console.log(label);
    console.log("length = ", labelLength);
    console.log("freq = ", labelFreq);
    factor(priorWeight * (labelFreq-labelLength));
    return label;
  });
};

var literalListener = cache(function(label, item){
  var objectPrior = makeObjectPrior(item);
  return Enumerate(function(){
    var object = sample(objectPrior);
    var labelMeaning = meaning(label);
    factor(labelMeaning(object));
    return object;
  });
});                                         

var speaker = cache(function(target, item) {
  var labels = getLabelPrior(target);
  return Enumerate(function(){
    var label = sample(labels);
    var possibleOutcome = sample(literalListener(label, item));
    condition(possibleOutcome === target);
    return label;
  });
});

var filename = "modelOutput_table_0.05.csv";
refModule.writeCSV([["condition", "target", "priorWeight", "label", "prob"]], filename);

map(function(condition) {
  map(function(target) {
    console.log(condition);
    var item = cons(target, info.conditions[condition]);
    var speakerERP = speaker(target, item);
    var transformedERP = Enumerate(function(){
      var label = sample(speakerERP);
      return (_.contains(info.targets, label) ? "type" :
	      label === "table" ? "basicLevel" :
	      label === "furniture" ? "superDomain" :
	      "label not recognized");
    });
    transformedERP.print();
    refModule.writeERP(transformedERP, [condition, target, priorWeight], filename, 4);
  }, info.targets);
}, _.keys(info.conditions));
