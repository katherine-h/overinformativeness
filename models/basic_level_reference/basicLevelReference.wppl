// run using:
// webppl referenceGameSketch.wppl --require refModule/

var condition = function(x){
 factor(x ? 0 : -Infinity);
};

var uniformDraw = function (xs) {
  return xs[randomInteger(xs.length)];
};

var BasicLevelModel = function(domainInfo, alpha, freqWeight, lengthWeight) {
  var tax = domainInfo.tax;

  var labelFitness = function(label, object) {
    var consistentObjs = tax[label];
    return _.has(consistentObjs, object) ? tax[label][object] : -Infinity;
  };

  // The meaning of a label is a function that maps objects to fitness values
  var meaning = function(label) {
    return function(object) {
      return labelFitness(label, object);
    };
  };

  var makeObjectPrior = function(item) {
    return Enumerate(function() {
      return uniformDraw(item);
    });
  };

  var constructLabelPrior = function(target) {
    var labels = refModule.getAllPossibleLabels(target, tax);
    return Enumerate(function(){
      var label = uniformDraw(labels);
      return label;
    });
  };

  var literalListener = cache(function(label, item){
    var objectPrior = makeObjectPrior(item);
    var labelMeaning = meaning(label);
    return Enumerate(function(){
      var object = sample(objectPrior);
      factor(labelMeaning(object));
      return object;
    });
  });                                         

  var speaker = cache(function(target, item) {
    var labelPrior = constructLabelPrior(target);
    return Enumerate(function(){
      var label = sample(labelPrior);

      var literalListenerERP = literalListener(label, item);
      factor(alpha * literalListenerERP.score([], target));

      var labelLength = refModule.getRelativeLength(label);
      factor(- lengthWeight * labelLength);

      var labelFreq = refModule.getRelativeLogFrequency(label);
      factor(freqWeight * labelFreq);
      return label;
    });
  });

  return speaker;
};

var alphaRange = _.range(.5, 10, .5); 
var lengthWeightRange = _.range(.5, 10, .5); 
var freqWeightRange = _.range(.5, 10, .5); 

var filename = "normalizedFreqLength.csv";
refModule.writeCSV([["domain", "condition", "target", "alpha",
		     "lengthWeight", "freqWeight", "label", "modelProb"]],
		   filename);

map(function(domain) {
  console.log("running domain... " + domain);
  var domainInfo = globalInfo.info[domain];
  map(function(condition) {
    console.log("running condition..." + condition);
    map(function(target) {
      map(function(alpha) {
	map(function(lengthWeight) {
	  map(function(freqWeight) {
	    var item = cons(target, domainInfo.conditions[condition]);
	    var speakerModel = BasicLevelModel(domainInfo, alpha, freqWeight,
					       lengthWeight);
	    var speakerERP = speakerModel(target, item);
	    var transformedERP = Enumerate(function(){
	      var label = sample(speakerERP);
	      return (_.contains(domainInfo.targets, label) ? "type" :
		      label === domainInfo.basicLabel ? "basicLevel" :
		      label === domainInfo.superLabel ? "superDomain" :
		      "label not recognized");
	    });
	    refModule.writeERP(transformedERP,
			       [domain, condition, target,
	    			alpha.toFixed(2), lengthWeight.toFixed(2),
				freqWeight.toFixed(2)], filename, 4);
	  }, freqWeightRange);
	}, lengthWeightRange);
      }, alphaRange);
    }, domainInfo.targets);
  }, _.keys(domainInfo.conditions));
}, globalInfo.domains);
